var app = angular.module('myApp');

app.controller("jobListCtrl", function($http, $scope, inputFactory, diceFactory) {
   $scope.searchObject = inputFactory.returnObject();
   console.log($scope.searchObject);
  //  $http({
  //      method: 'GET',
  //      url: 'http://service.dice.com/api/rest/jobsearch/v1/simple.json?city=48207&direct=1&state=MI'
  //  }).then(function successCallback(response) {
  //          $scope.items = response.data.resultItemList;
  //          doTheMap();
  //      },
  //      function errorCallback(response) {
  //          console.log(response);
  //      });
  diceFactory.post($scope.searchObject, (response)=>{
    console.log(response);
    $scope.items = response.resultItemList;
    doTheMap();});
  // .then(()=>{$scope.diceData = diceFactory.data()});
  console.log($scope.diceData);

    $scope.globalMap;
    $scope.service;
    $scope.geocoder;

   function initMap(){
    console.log("init Map starts");
   $scope.globalMap = new google.maps.Map(document.getElementById('job-map'), {
       center: {
           lat: 42.2814,
           lng: -83.7483
       },
       scrollwheel: true,
       zoom: 10
       });
    }

    //The Dice API returns an array (currently)called $scope.items
    //First, I need to find the address and use it for the center
    //Also use the address for the center of the PlacesServices if provided
    //otherwise, use the zipcode for the center of PS
    //


    $scope.searchCenter = chooseCenterParam();

    function chooseCenterParam(){
        //only uses the stret address as the center if it was provided
        console.log("chooseCenterParam starts");
        if ($scope.searchObject.street_address !== undefined){
            return $scope.searchObject.street_address + " " + $scope.searchObject.zipcode;
        }
        return $scope.searchObject.zipcode;
    }


    function getCenter() {
        console.log("get center starts");
        //takes user input and centers the map on the selected location
        chooseCenterParam();
        $scope.geocoder = new google.maps.Geocoder();
        $scope.geocoder.geocode({
            address: $scope.searchCenter,
            componentRestrictions: {
                country: 'US',
                postalCode: $scope.searchObject.zipcode
            }
        }, function(results, status) {
          console.log("get center callback starts");
            if (status == 'OK') {
                $scope.globalMap.setCenter(results[0].geometry.location);
                $scope.locationsRequest.location = results[0].geometry.location;
                $scope.locationsRequest.radius = 4000;
                getLocations();
            }
        });
    }

    function addMarker(place){
      console.log("addMarker starts");
        var marker = new google.maps.Marker({
            map: $scope.globalMap,
            position: place.geometry.location,
            icon: {
                url: 'http://maps.gstatic.com/mapfiles/circle.png',
                anchor: new google.maps.Point(10, 10),
                scaledSize: new google.maps.Size(10, 17)
            }
        });
    }

    $scope.locationsRequest = {
        query: location.company,
        location: $scope.latlng,
        radius: 4000,
    }; //passes information generated by the APIs from user's search parameters to getLocations function

    function getLocations() {
      console.log("get locations starts");
      // var i = 0;
      var thisId={};
        $scope.service = new google.maps.places.PlacesService($scope.globalMap);
        //for each item returned by the DICE API...
<<<<<<< HEAD
            var thisThingThatIsNotAnotherThing = function(location){
              console.log("the one with a ridiculous name starts");
              console.log('Hello');

                //setting query to values from our input
                $scope.locationsRequest.query = location.company + " " +location.location;
                //below: passes the $scope.locationsRequest object as the search parameters
                //makes request to places********
                $scope.service.textSearch($scope.locationsRequest, function(results, status){
                  console.log("text search status: " + status);
                  if (status == google.maps.places.PlacesServiceStatus.OK) {
                   thisId = results[0].place_id
                  }
                });
                        //Make another request to places********
                $scope.service.getDetails({placeId: thisId}, function(place, status){
                  console.log("getDetails status: "+status);
                    if (status ==  google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT){
                      setTimeout(1000);
                    }
                    else if (status == google.maps.places.PlacesServiceStatus.OK) {
                        $scope.detailedMapsInfo.push(place);
                        console.log($scope.detailedMapsInfo);
                        console.log(place);
                        addMarker(place);


                    }//
                });
              }

          setInterval(function nextOne() {
            var i = 0;
            console.log("next one is called!");
            while( i < 1) {
              console.log("next one if statement, i="+i);
              thisThingThatIsNotAnotherThing($scope.items[i]);

            }
            i++
          }, 1000);

      };

    function doTheMap(){
      console.log("dotheMap starts");
        initMap();
        getCenter();

    }

});

// app.controller('searchOutputCtrl', function($scope, inputFactory) {

// });
